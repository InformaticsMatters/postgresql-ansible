---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: postgres
  namespace: {{ pg_namespace }}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: postgres
  serviceName: postgres
  template:
    metadata:
      name: postgres
      labels:
        app: postgres
    spec:
      serviceAccountName: postgres

{% if pg_enable_affinity %}
      # We must have a 'core' node
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: informaticsmatters.com/purpose
                operator: In
                values:
                - core
{% endif %}

{% if all_image_preset_pullsecret_name|string|length > 0 %}
      imagePullSecrets:
      - name: {{ all_image_preset_pullsecret_name }}
{% endif %}

      # To access the mounted database volume
      # we set the security context's fsGroup
      # to the group that will be using the volume
      # In this case it's the postgres group in the container
      # (obtained empirically)
      securityContext:
        fsGroup: 26

      containers:
      - name: postgres
        image: {{ pg_image_registry }}/{{ pg_image_name }}:{{ pg_image_version }}
        imagePullPolicy: IfNotPresent
        terminationMessagePolicy: FallbackToLogsOnError
        ports:
        - containerPort: 5432
        resources:
          limits:
            cpu: {{ pg_cpu_limit }}
            memory: {{ pg_mem_limit }}
          requests:
            cpu: {{ pg_cpu_request }}
            memory: {{ pg_mem_request }}
        readinessProbe:
          # Wait 30 seconds
          # then fail after more than 2 minutes of failures...
          initialDelaySeconds: 30
          failureThreshold: 9
          periodSeconds: 15
          timeoutSeconds: 2
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - pg_isready -h 127.0.0.1 -p 5432 -U {{ pg_user }} -q
        livenessProbe:
          # Wait 30 seconds
          # then fail after more than 2 minutes of failures...
          initialDelaySeconds: 30
          failureThreshold: 9
          periodSeconds: 15
          timeoutSeconds: 2
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - pg_isready -h 127.0.0.1 -p 5432 -U {{ pg_user }} -q
        volumeMounts:
        # Container shared-memory work-around.
        # See https://github.com/kubernetes/kubernetes/issues/28272
        - mountPath: /dev/shm
          name: dshm
        # Postgres configuration
        - mountPath: /etc/postgresql/postgresql.conf
          name: postgres-conf
          subPath: postgresql.conf
          readOnly: true
{% if pg_extra_configuration_file %}
        # Optional (extra) configuration
        - mountPath: /etc/postgresql/extra.conf
          name: postgres-extra-conf
          subPath: extra.conf
          readOnly: true
{% endif %}
{% if pg_aux_user_fact %}
        # Database initialisation scripts
        # It's here we create additional - 'out-of-the-box' users and databases
        - mountPath: /docker-entrypoint-initdb.d/01-init.sh
          name: postgres-init
          subPath: 01-init.sh
          readOnly: true
{% endif %}
        # Persistent volume for data
        - mountPath: /var/lib/postgresql/data
          name: pgdata
{% if pg_copy_vol_size_g %}
        # Persistent volume for pgcopy data
        - mountPath: /pgcopy
          name: pgcopy
{% endif %}
        env:
        # PGDATA - the location of persisted database files.
        # Normally a sub-directory of '/var/lib/postgresql/data'.
        # The PVC is mounted at '/var/lib/postgresql' and we use
        # PGDATA to identify a sub-directory in the mount.
        # If we don't postres fails to start with the error: -
        #
        #   initdb: directory "/var/lib/postgresql/data" exists but is not empty
        #   It contains a lost+found directory, perhaps due to it being a mount point.
        #   Using a mount point directly as the data directory is not recommended.
        #   Create a subdirectory under the mount point.
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        # Admin/superuser name and password
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres
              key: database_admin_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: database_admin_user_password
        # The default database that is created
        # when the image is first started
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres
              key: database_name

      volumes:
      - name: postgres-conf
        configMap:
          name: postgres-conf
      - name: dshm
        emptyDir:
          medium: Memory

{% if pg_extra_configuration_file %}
      - name: postgres-extra-conf
        configMap:
          name: postgres-extra-conf
{% endif %}

{% if pg_aux_user_fact %}
      - name: postgres-init
        configMap:
          name: postgres-init
{% endif %}

      # The database volume.
      # A claim if the volume has a size,
      # otherwise an EmptyDir volume.
      - name: pgdata
{% if pg_vol_size_g %}
        persistentVolumeClaim:
          claimName: pg
{% else %}
        emptyDir: {}
{% endif %}

{% if pg_copy_vol_size_g %}
      # The optional pgcopy volume.
      - name: pgcopy
        persistentVolumeClaim:
          claimName: pgcopy
{% endif %}
