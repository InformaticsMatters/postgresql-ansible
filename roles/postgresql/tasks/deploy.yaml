---

- name: Creating namespace '{{ pg_namespace }}'
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - namespace
  - serviceaccount
  - role-im-psp-unrestricted
  - rolebinding-pg-sa

- name: Relax {{ pg_namespace }} 'default' service account (for cert-manager)
  k8s:
    definition: "{{ lookup('template', 'rolebinding-default-sa.yaml.j2') }}"
    wait: yes
  when: cm_state|string == 'present'

# Secrets (database) ----------------------------------------------------------

- name: Check database (postgres) secrets
  k8s_info:
    kind: Secret
    api_version: v1
    namespace: "{{ pg_namespace }}"
    name: postgres
  register: pg_s_result

- name: Set database secret facts
  set_fact:
    pg_user_fact: "{{ pg_user }}"
    pg_user_password_fact: "{{ pg_user_password }}"
    pg_database_fact: "{{ pg_database }}"
  when: pg_s_result.resources|length == 0

- name: Set database secret facts (pre-deployed secrets)
  set_fact:
    pg_user_fact: "{{ pg_s_result.resources[0].data.database_admin_user|b64decode }}"
    pg_user_password_fact: "{{ pg_s_result.resources[0].data.database_admin_user_password|b64decode }}"
    pg_database_fact: "{{ pg_s_result.resources[0].data.database_name|b64decode }}"
  when: pg_s_result.resources|length == 1

- name: Write Database secrets
  k8s:
    definition: "{{ lookup('template', 'secret.yaml.j2') }}"
    wait: yes
  when: pg_s_result.resources|length == 0

- name: Display Database admin password
  debug:
    var: pg_user_password_fact

# Database volume -------------------------------------------------------------

- name: Get {{ pg_vol_storageclass }} StorageClass
  k8s_info:
    kind: StorageClass
    name: "{{ pg_vol_storageclass }}"
  register: sc_result
  when: pg_vol_storageclass != " "

- name: Assert {{ pg_vol_storageclass }} StorageClass
  assert:
    that: sc_result.resources|length == 1
    fail_msg: The {{ pg_vol_storageclass }} StorageClass must be available on the cluster
  when: pg_vol_storageclass != " "

- name: Create postgres volume claim ({{ pg_vol_storageclass }})
  k8s:
    definition: "{{ lookup('template', 'pvc.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

# Best practice ... wait for the PVC to bind.
# e.g. wait until resources[0].status.phase == Bound (initially Pending)

- name: Wait for postgres volume claim to bind
  k8s_info:
    kind: PersistentVolumeClaim
    name: pg
    namespace: "{{ pg_namespace }}"
  register: pg_pvc_result
  until: >-
    pg_pvc_result.resources|length > 0
    and pg_pvc_result.resources[0].status is defined
    and pg_pvc_result.resources[0].status.phase is defined
    and pg_pvc_result.resources[0].status.phase == 'Bound'
  delay: 5
  retries: "{{ (bind_timeout|int / 5)|int }}"
  when: wait_for_bind|bool

# Database (postgres) ---------------------------------------------------------

- name: Postgres
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"
  loop:
  - configmap-postgres-conf
  - service
  - statefulset

- name: Wait for postgres to become Ready
  k8s_info:
    kind: Pod
    name: database-0
    namespace: "{{ pg_namespace }}"
  register: database_result
  until: >-
    database_result.resources|length == 1
    and database_result.resources[0].status is defined
    and database_result.resources[0].status.containerStatuses is defined
    and database_result.resources[0].status.containerStatuses|length == 1
    and database_result.resources[0].status.containerStatuses[0].ready
  delay: 30
  retries: "{{ (wait_timeout|int / 30)|int }}"
