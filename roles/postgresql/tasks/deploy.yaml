---

# Sanity-checks

- name: Assert control variables (aux user)
  assert:
    that:
    - pg_aux_user_password|string|length > 0
    - pg_aux_database|string|length > 0
  when: pg_aux_user|string|length > 0

# Create namespace

- name: Create namespace ({{ pg_namespace }})
  k8s:
    definition: "{{ lookup('template', 'namespace.yaml.j2') }}"
    wait: yes

- name: Create DockerHub image pull secret
  k8s:
    definition: "{{ lookup('template', 'secret-dh-imagepull.yaml.j2') }}"
    wait: yes
  vars:
    pull_namespace: "{{ pg_namespace }}"
    pull_secret: "{{ pg_dockerhub_pullsecret }}"
  when: pg_dockerhub_pullsecret|string|length > 0

- name: Creating namespace material
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - serviceaccount
  - role-im-psp-unrestricted
  - rolebinding-pg-sa

# Secrets (database) ----------------------------------------------------------

- name: Check database (postgres) secrets
  k8s_info:
    kind: Secret
    api_version: v1
    namespace: "{{ pg_namespace }}"
    name: postgres
  register: pg_s_result

- name: Set database secret facts
  set_fact:
    pg_user_fact: "{{ pg_user }}"
    pg_user_password_fact: "{{ pg_user_password }}"
    pg_database_fact: "{{ pg_database }}"
    pg_aux_user_fact: "{{ pg_aux_user }}"
    pg_aux_user_password_fact: "{{ pg_aux_user_password }}"
    pg_aux_database_fact: "{{ pg_aux_database }}"
  when: pg_s_result.resources|length == 0

- name: Set database secret facts (pre-deployed secrets)
  set_fact:
    pg_user_fact: "{{ pg_s_result.resources[0].data.database_admin_user|b64decode }}"
    pg_user_password_fact: "{{ pg_s_result.resources[0].data.database_admin_user_password|b64decode }}"
    pg_database_fact: "{{ pg_s_result.resources[0].data.database_name|b64decode }}"
    pg_aux_user_fact: "{{ pg_s_result.resources[0].data.database_aux_user }}"
    pg_aux_user_password_fact: "{{ pg_s_result.resources[0].data.database_aux_user_password }}"
    pg_aux_database_fact: "{{ pg_s_result.resources[0].data.database_aux_database }}"
  when: pg_s_result.resources|length == 1

- name: Write Database secrets
  k8s:
    definition: "{{ lookup('template', 'secret.yaml.j2') }}"
    wait: yes
  when: pg_s_result.resources|length == 0

- name: Display Database admin password
  debug:
    var: pg_user_password_fact

# Database volume -------------------------------------------------------------

- name: Get {{ pg_vol_storageclass }} StorageClass
  k8s_info:
    kind: StorageClass
    name: "{{ pg_vol_storageclass }}"
  register: sc_result
  when: pg_vol_storageclass != " "

- name: Assert {{ pg_vol_storageclass }} StorageClass
  assert:
    that: sc_result.resources|length == 1
    fail_msg: The {{ pg_vol_storageclass }} StorageClass must be available on the cluster
  when: pg_vol_storageclass != " "

- name: Create postgres volume claim ({{ pg_vol_storageclass }})
  k8s:
    definition: "{{ lookup('template', 'pvc-pg.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"
  when: pg_vol_size_g|int > 0

# Best practice ... wait for the PVC to bind.
# e.g. wait until resources[0].status.phase == Bound (initially Pending)

- name: Wait for postgres volume claim to bind
  k8s_info:
    kind: PersistentVolumeClaim
    name: pg
    namespace: "{{ pg_namespace }}"
  register: pg_pvc_result
  until: >-
    pg_pvc_result.resources|length > 0
    and pg_pvc_result.resources[0].status is defined
    and pg_pvc_result.resources[0].status.phase is defined
    and pg_pvc_result.resources[0].status.phase == 'Bound'
  delay: 5
  retries: "{{ (bind_timeout|int / 5)|int }}"
  when:
  - pg_vol_size_g|int > 0
  - wait_for_bind|bool

# Database volume (pg-copy) ---------------------------------------------------

- block:

  - name: Get {{ pg_copy_vol_storageclass }} StorageClass
    k8s_info:
      kind: StorageClass
      name: "{{ pg_copy_vol_storageclass }}"
    register: sc_result
    when: pg_copy_vol_storageclass != " "

  - name: Assert {{ pg_copy_vol_storageclass }} StorageClass
    assert:
      that: sc_result.resources|length == 1
      fail_msg: The {{ pg_copy_vol_storageclass }} StorageClass must be available on the cluster
    when: pg_copy_vol_storageclass != " "

  - name: Create postgres pg-copy volume claim ({{ pg_copy_vol_storageclass }})
    k8s:
      definition: "{{ lookup('template', 'pvc-pgcopy.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ wait_timeout }}"

  # Best practice ... wait for the PVC to bind.
  # e.g. wait until resources[0].status.phase == Bound (initially Pending)

  - name: Wait for postgres pg-copy volume claim to bind
    k8s_info:
      kind: PersistentVolumeClaim
      name: pg
      namespace: "{{ pg_namespace }}"
    register: pg_copy_pvc_result
    until: >-
      pg_copy_pvc_result.resources|length > 0
      and pg_copy_pvc_result.resources[0].status is defined
      and pg_copy_pvc_result.resources[0].status.phase is defined
      and pg_copy_pvc_result.resources[0].status.phase == 'Bound'
    delay: 5
    retries: "{{ (bind_timeout|int / 5)|int }}"
    when: wait_for_bind|bool

  when: pg_copy_vol_size_g|int > 0

# Database init (if there's an aux user) --------------------------------------

- name: Postgres init
  k8s:
    definition: "{{ lookup('template', 'configmap-postgres-init.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"
  when: pg_aux_user_fact|string|length > 0

# Database extra config (if there's a configuration file) ---------------------

- name: Extra configuration
  block:

  - name: Read extra config from file
    set_fact:
      extra_config_fact: "{{ lookup('file', '{{ pg_extra_configuration_file }}') }}"

  - name: Deploy extra config
    k8s:
      definition: "{{ lookup('template', 'configmap-postgres-extra-conf.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ wait_timeout }}"

  when: pg_extra_configuration_file|string|length > 1

# Database (postgres) ---------------------------------------------------------

- name: Postgres
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"
  loop:
  - configmap-postgres-conf
  - service
  - statefulset

- name: Wait for Postgres Pod
  k8s_info:
    kind: Pod
    namespace: "{{ pg_namespace }}"
    label_selectors:
    - app=postgres
  register: result
  until: >-
    result.resources|length > 0
    and result.resources[0].status.containerStatuses is defined
    and result.resources[0].status.containerStatuses|length == 1
    and result.resources[0].status.containerStatuses[0].ready is defined
    and result.resources[0].status.containerStatuses[0].ready
  delay: 20
  retries: "{{ (wait_timeout|int / 20)|int }}"
